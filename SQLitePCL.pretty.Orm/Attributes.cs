//
// Copyright (c) 2009-2015 Krueger Systems, Inc.
// Copyright (c) 2015 David Bordoley
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

using System;
using System.Diagnostics.Contracts;

namespace SQLitePCL.pretty.Orm.Attributes
{   
    /// <summary>
    /// Attribute used to specify the SQL table a class should be serialized to.
    /// </summary>
    [AttributeUsage (AttributeTargets.Class)]
    public sealed class TableAttribute : Attribute
    {
        private readonly string _name;

        /// <summary>
        /// Initializes a new instance of the <see cref="SQLitePCL.pretty.Orm.Attributes.TableAttribute"/> class.
        /// </summary>
        /// <param name="name">The name of the table.</param>
        public TableAttribute (string name)
        {
            Contract.Requires(name != null);
            Contract.Requires(name.Length != 0);
            _name = name;
        }

        /// <summary>
        /// The table name.
        /// </summary>
        /// <value>The name.</value>
        public string Name { get { return _name; } }
    }

    /// <summary>
    /// Attribute used to specify the column in the SQL table a property value should be serialized to.
    /// </summary>
    [AttributeUsage (AttributeTargets.Property)]
    public sealed class ColumnAttribute : Attribute
    {
        private readonly string _name;

        /// <summary>
        /// Initializes a new instance of the <see cref="SQLitePCL.pretty.Orm.Attributes.ColumnAttribute"/> class.
        /// </summary>
        /// <param name="name">The name of the column.</param>
        public ColumnAttribute (string name)
        {
            Contract.Requires(name != null);
            Contract.Requires(name.Length != 0);
            _name = name;
        }

        /// <summary>
        /// The column name.
        /// </summary>
        /// <value>The name.</value>
        public string Name { get { return _name; } }
    }

    /// <summary>
    /// Indicates that the annotated value's column is part of the table's primary key.
    /// </summary>
    [AttributeUsage (AttributeTargets.Property)]
    public sealed class PrimaryKeyAttribute : Attribute
    {
    }

    /// <summary>
    /// Attribute used to specify table column indexes.
    /// </summary>
    [AttributeUsage (AttributeTargets.Property)]
    public sealed class IndexedAttribute : Attribute
    {
        private readonly string _name;
        private readonly int _order;
        private readonly bool _unique;

        /// <summary>
        /// Creates a non-unique index on the given column.
        /// </summary>
        public IndexedAttribute() : this(false)
        { 
        }

        /// <summary>
        /// Creates an index on the given column.
        /// </summary>
        /// <param name="unique">Whether the index should be unique or not.</param>
        public IndexedAttribute(bool unique)
        {
            _name = null;
            _order = 0;
            _unique = unique;
        }

        /// <summary>
        /// Creates a non-unique named index. More than one property may be annotated with
        /// the same column name, and the resulting index will be generated by ordering
        /// the columns according the to <paramref name="order"/> property.
        /// </summary>
        /// <param name="name">The name of the index.</param>
        /// <param name="order">
        /// The order of the column in the index. Note this order property must be
        /// unique for all properties on the type.
        /// </param>
        public IndexedAttribute(string name, int order) : this(name, order, false) 
        {
        }

        /// <summary>
        /// Creates a named index. More than one property may be annotated with
        /// the same column name, and the resulting index will be generated by ordering
        /// the columns according the to <paramref name="order"/> property.
        /// </summary>
        /// <param name="name">The name of the index.</param>
        /// <param name="order">Order.</param>
        /// <param name="unique">
        /// Whether the index should be unique or not. Note all annotate properties that
        /// share the same index name, but also include the same value for the unique property.
        /// </param>
        public IndexedAttribute(string name, int order, bool unique)
        {
            Contract.Requires(name != null);
            Contract.Requires(name.Length != 0);
            _name = name;
            _order = order;
            _unique = unique;
        }

        /// <summary>
        /// The name of the index or null
        /// </summary>
        public string Name { get { return _name; } }

        /// <summary>
        /// The order of the annotated column in the index.
        /// </summary>
        public int Order { get { return _order; } }

        /// <summary>
        /// Whether the index should be unique or not.
        /// </summary>
        public bool Unique { get { return _unique; } }
    }

    /// <summary>
    /// Attribute to indicate that a given property should be ignored by the table mapping.
    /// </summary>
    [AttributeUsage (AttributeTargets.Property)]
    public sealed class IgnoreAttribute : Attribute
    {
    }

    /// <summary>
    /// Attribute used to specify the collation function that should be used to sort the column.
    /// Note it is an error to annotate a non-string column with this attribute.
    /// </summary>
    [AttributeUsage (AttributeTargets.Property)]
    public sealed class CollationAttribute: Attribute
    {
        private readonly string _name;

        /// <summary>
        /// Initializes a new instance of the <see cref="SQLitePCL.pretty.Orm.Attributes.CollationAttribute"/> class.
        /// </summary>
        /// <param name="name">The name of the collation function</param>
        public CollationAttribute (string name)
        {
            Contract.Requires(name != null);

            _name = name;
        }

        /// <summary>
        /// Gets the value.
        /// </summary>
        /// <value>The value.</value>
        public string Name { get { return _name; } }
    }

    /// <summary>
    /// Indicates that a table column is not nullable.
    /// </summary>
    [AttributeUsage (AttributeTargets.Property)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}